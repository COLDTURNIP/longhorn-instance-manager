#!/bin/bash
set -e

source $(dirname $0)/version

cd $(dirname $0)/..

project=$(basename "$PWD")

command -v buildx >/dev/null && build_cmd=(buildx) || build_cmd=(docker buildx)

# read configurable parameters
REPO=${REPO:-longhornio}
IMAGE_NAME=${IMAGE_NAME:-$project}
TAG=${TAG:-''}
OUTPUT_ARGS=${OUTPUT_ARGS:-'--load'}
IS_SECURE=${IS_SECURE:-'false'}
MACHINE=${MACHINE:-''}
TARGET_PLATFORMS=${TARGET_PLATFORMS:-''}
IID_FILE=${IID_FILE:-''}
IID_FILE_FLAG=${IID_FILE_FLAG:-''}

if [[ -z $TAG ]]; then
    if api_version=$(./bin/longhorn-instance-manager version --client-only | jq ".clientVersion.instanceManagerAPIVersion"); then
      TAG="v${api_version}_$(date -u +%Y%m%d)"
    else
      TAG="$VERSION"
    fi
fi

image="${REPO}/${IMAGE_NAME}:${TAG}"

builder_args=()
[[ $MACHINE ]] && builder_args+=('--builder' "$MACHINE")

IFS=' ' read -r -a iid_file_args <<<"$IID_FILE_FLAG"
[[ -n "$IID_FILE" && ${#iid_file_args} == 0 ]] && iid_file_args=('--iidfile' "$IID_FILE")

IFS=' ' read -r -a buildx_args <<<"$OUTPUT_ARGS"
[[ $IS_SECURE == 'true' ]] && buildx_args+=('--sbom=true' '--attest' 'type=provenance,mode=max')

if [[ $TARGET_PLATFORMS ]] ; then
    IFS='/' read -r os arch <<<"$TARGET_PLATFORMS"
    buildx_args+=('--platform' "$TARGET_PLATFORMS")
else
    case $(uname -m) in
    aarch64 | arm64)
        arch=arm64
        ;;
    x86_64)
        arch=amd64
        ;;
    s390x)
        arch=s390x
        ;;
    *)
        echo "$(uname -a): unsupported architecture"
        exit 1
    esac
    buildx_args+=('--platform' "linux/$arch")
fi

# update base image to get latest changes
grep 'FROM.*/' ./Dockerfile | awk '{print $2}' | while read -r base_image
do
    docker pull "$base_image"
done

function convert_version_to_major_minor_x() {
    local version="$1"
    if [[ "$version" =~ ^v([0-9]+)\.([0-9]+)\. ]]; then
        echo "v${BASH_REMATCH[1]}.${BASH_REMATCH[2]}.x"
    else
        echo "Invalid version format: $version"
    fi
}

function get_branch() {
  local version_file="version"
  if [[ ! -f $version_file ]]; then
    echo "Error: Version file '$version_file' not found."
    exit 1
  fi

  local version=$(cat "$version_file")
  local branch=$(convert_version_to_major_minor_x "$version")

  # Fetch versions.json from the appropriate branch, fallback to main
  wget --spider "https://raw.githubusercontent.com/longhorn/dep-versions/${branch}/versions.json" >/dev/null
  if [ $? -eq 0 ]; then
    echo "${branch}"
  else
    echo "main"
  fi
}

branch=$(get_branch)

echo "Building ${image} with ARCH=${arch} branch=${branch}"
echo "${build_cmd[@]}" build --no-cache \
    "${builder_args[@]}" \
    "${iid_file_args[@]}" \
    "${buildx_args[@]}" \
    --build-arg "ARCH=${arch}" \
    --build-arg "branch=${branch}" \
    -t "$image" -f ./Dockerfile .
"${build_cmd[@]}" build --no-cache \
    "${builder_args[@]}" \
    "${iid_file_args[@]}" \
    "${buildx_args[@]}" \
    --build-arg "ARCH=${arch}" \
    --build-arg "branch=${branch}" \
    -t "$image" -f ./Dockerfile .

echo "Built $image"

mkdir ./bin || true
echo "$image" > ./bin/latest_image
